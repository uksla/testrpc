/* eslint-disable */
/*Generated by GenDocu.com*/
// package: api
// file: api.proto

import * as api_pb from "./api_pb";
import {grpc} from "@improbable-eng/grpc-web";

type DexGetClient = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.GetClientReq;
  readonly responseType: typeof api_pb.GetClientResp;
};

type DexCreateClient = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.CreateClientReq;
  readonly responseType: typeof api_pb.CreateClientResp;
};

type DexUpdateClient = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.UpdateClientReq;
  readonly responseType: typeof api_pb.UpdateClientResp;
};

type DexDeleteClient = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.DeleteClientReq;
  readonly responseType: typeof api_pb.DeleteClientResp;
};

type DexCreatePassword = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.CreatePasswordReq;
  readonly responseType: typeof api_pb.CreatePasswordResp;
};

type DexUpdatePassword = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.UpdatePasswordReq;
  readonly responseType: typeof api_pb.UpdatePasswordResp;
};

type DexDeletePassword = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.DeletePasswordReq;
  readonly responseType: typeof api_pb.DeletePasswordResp;
};

type DexListPasswords = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.ListPasswordReq;
  readonly responseType: typeof api_pb.ListPasswordResp;
};

type DexGetVersion = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.VersionReq;
  readonly responseType: typeof api_pb.VersionResp;
};

type DexListRefresh = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.ListRefreshReq;
  readonly responseType: typeof api_pb.ListRefreshResp;
};

type DexRevokeRefresh = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.RevokeRefreshReq;
  readonly responseType: typeof api_pb.RevokeRefreshResp;
};

type DexVerifyPassword = {
  readonly methodName: string;
  readonly service: typeof Dex;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof api_pb.VerifyPasswordReq;
  readonly responseType: typeof api_pb.VerifyPasswordResp;
};

export class Dex {
  static readonly serviceName: string;
  static readonly GetClient: DexGetClient;
  static readonly CreateClient: DexCreateClient;
  static readonly UpdateClient: DexUpdateClient;
  static readonly DeleteClient: DexDeleteClient;
  static readonly CreatePassword: DexCreatePassword;
  static readonly UpdatePassword: DexUpdatePassword;
  static readonly DeletePassword: DexDeletePassword;
  static readonly ListPasswords: DexListPasswords;
  static readonly GetVersion: DexGetVersion;
  static readonly ListRefresh: DexListRefresh;
  static readonly RevokeRefresh: DexRevokeRefresh;
  static readonly VerifyPassword: DexVerifyPassword;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class DexClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getClient(
    requestMessage: api_pb.GetClientReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.GetClientResp|null) => void
  ): UnaryResponse;
  getClient(
    requestMessage: api_pb.GetClientReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.GetClientResp|null) => void
  ): UnaryResponse;
  createClient(
    requestMessage: api_pb.CreateClientReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.CreateClientResp|null) => void
  ): UnaryResponse;
  createClient(
    requestMessage: api_pb.CreateClientReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.CreateClientResp|null) => void
  ): UnaryResponse;
  updateClient(
    requestMessage: api_pb.UpdateClientReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.UpdateClientResp|null) => void
  ): UnaryResponse;
  updateClient(
    requestMessage: api_pb.UpdateClientReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.UpdateClientResp|null) => void
  ): UnaryResponse;
  deleteClient(
    requestMessage: api_pb.DeleteClientReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.DeleteClientResp|null) => void
  ): UnaryResponse;
  deleteClient(
    requestMessage: api_pb.DeleteClientReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.DeleteClientResp|null) => void
  ): UnaryResponse;
  createPassword(
    requestMessage: api_pb.CreatePasswordReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.CreatePasswordResp|null) => void
  ): UnaryResponse;
  createPassword(
    requestMessage: api_pb.CreatePasswordReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.CreatePasswordResp|null) => void
  ): UnaryResponse;
  updatePassword(
    requestMessage: api_pb.UpdatePasswordReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.UpdatePasswordResp|null) => void
  ): UnaryResponse;
  updatePassword(
    requestMessage: api_pb.UpdatePasswordReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.UpdatePasswordResp|null) => void
  ): UnaryResponse;
  deletePassword(
    requestMessage: api_pb.DeletePasswordReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.DeletePasswordResp|null) => void
  ): UnaryResponse;
  deletePassword(
    requestMessage: api_pb.DeletePasswordReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.DeletePasswordResp|null) => void
  ): UnaryResponse;
  listPasswords(
    requestMessage: api_pb.ListPasswordReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.ListPasswordResp|null) => void
  ): UnaryResponse;
  listPasswords(
    requestMessage: api_pb.ListPasswordReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.ListPasswordResp|null) => void
  ): UnaryResponse;
  getVersion(
    requestMessage: api_pb.VersionReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.VersionResp|null) => void
  ): UnaryResponse;
  getVersion(
    requestMessage: api_pb.VersionReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.VersionResp|null) => void
  ): UnaryResponse;
  listRefresh(
    requestMessage: api_pb.ListRefreshReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.ListRefreshResp|null) => void
  ): UnaryResponse;
  listRefresh(
    requestMessage: api_pb.ListRefreshReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.ListRefreshResp|null) => void
  ): UnaryResponse;
  revokeRefresh(
    requestMessage: api_pb.RevokeRefreshReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.RevokeRefreshResp|null) => void
  ): UnaryResponse;
  revokeRefresh(
    requestMessage: api_pb.RevokeRefreshReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.RevokeRefreshResp|null) => void
  ): UnaryResponse;
  verifyPassword(
    requestMessage: api_pb.VerifyPasswordReq,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: api_pb.VerifyPasswordResp|null) => void
  ): UnaryResponse;
  verifyPassword(
    requestMessage: api_pb.VerifyPasswordReq,
    callback: (error: ServiceError|null, responseMessage: api_pb.VerifyPasswordResp|null) => void
  ): UnaryResponse;
}

