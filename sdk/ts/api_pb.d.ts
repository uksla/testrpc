/* eslint-disable */
/*Generated by GenDocu.com*/
// package: api
// file: api.proto

import * as jspb from "google-protobuf";

export class Client extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getSecret(): string;
  setSecret(value: string): void;

  clearRedirectUrisList(): void;
  getRedirectUrisList(): Array<string>;
  setRedirectUrisList(value: Array<string>): void;
  addRedirectUris(value: string, index?: number): string;

  clearTrustedPeersList(): void;
  getTrustedPeersList(): Array<string>;
  setTrustedPeersList(value: Array<string>): void;
  addTrustedPeers(value: string, index?: number): string;

  getPublic(): boolean;
  setPublic(value: boolean): void;

  getName(): string;
  setName(value: string): void;

  getLogoUrl(): string;
  setLogoUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Client.AsObject;
  static toObject(includeInstance: boolean, msg: Client): Client.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Client, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Client;
  static deserializeBinaryFromReader(message: Client, reader: jspb.BinaryReader): Client;
}

export namespace Client {
  export type AsObject = {
    id: string,
    secret: string,
    redirectUrisList: Array<string>,
    trustedPeersList: Array<string>,
    pb_public: boolean,
    name: string,
    logoUrl: string,
  }
}

export class GetClientReq extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetClientReq.AsObject;
  static toObject(includeInstance: boolean, msg: GetClientReq): GetClientReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetClientReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetClientReq;
  static deserializeBinaryFromReader(message: GetClientReq, reader: jspb.BinaryReader): GetClientReq;
}

export namespace GetClientReq {
  export type AsObject = {
    id: string,
  }
}

export class GetClientResp extends jspb.Message {
  hasClient(): boolean;
  clearClient(): void;
  getClient(): Client | undefined;
  setClient(value?: Client): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetClientResp.AsObject;
  static toObject(includeInstance: boolean, msg: GetClientResp): GetClientResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetClientResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetClientResp;
  static deserializeBinaryFromReader(message: GetClientResp, reader: jspb.BinaryReader): GetClientResp;
}

export namespace GetClientResp {
  export type AsObject = {
    client?: Client.AsObject,
  }
}

export class CreateClientReq extends jspb.Message {
  hasClient(): boolean;
  clearClient(): void;
  getClient(): Client | undefined;
  setClient(value?: Client): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateClientReq.AsObject;
  static toObject(includeInstance: boolean, msg: CreateClientReq): CreateClientReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateClientReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateClientReq;
  static deserializeBinaryFromReader(message: CreateClientReq, reader: jspb.BinaryReader): CreateClientReq;
}

export namespace CreateClientReq {
  export type AsObject = {
    client?: Client.AsObject,
  }
}

export class CreateClientResp extends jspb.Message {
  getAlreadyExists(): boolean;
  setAlreadyExists(value: boolean): void;

  hasClient(): boolean;
  clearClient(): void;
  getClient(): Client | undefined;
  setClient(value?: Client): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateClientResp.AsObject;
  static toObject(includeInstance: boolean, msg: CreateClientResp): CreateClientResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateClientResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateClientResp;
  static deserializeBinaryFromReader(message: CreateClientResp, reader: jspb.BinaryReader): CreateClientResp;
}

export namespace CreateClientResp {
  export type AsObject = {
    alreadyExists: boolean,
    client?: Client.AsObject,
  }
}

export class DeleteClientReq extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteClientReq.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteClientReq): DeleteClientReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeleteClientReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteClientReq;
  static deserializeBinaryFromReader(message: DeleteClientReq, reader: jspb.BinaryReader): DeleteClientReq;
}

export namespace DeleteClientReq {
  export type AsObject = {
    id: string,
  }
}

export class DeleteClientResp extends jspb.Message {
  getNotFound(): boolean;
  setNotFound(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteClientResp.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteClientResp): DeleteClientResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeleteClientResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteClientResp;
  static deserializeBinaryFromReader(message: DeleteClientResp, reader: jspb.BinaryReader): DeleteClientResp;
}

export namespace DeleteClientResp {
  export type AsObject = {
    notFound: boolean,
  }
}

export class UpdateClientReq extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  clearRedirectUrisList(): void;
  getRedirectUrisList(): Array<string>;
  setRedirectUrisList(value: Array<string>): void;
  addRedirectUris(value: string, index?: number): string;

  clearTrustedPeersList(): void;
  getTrustedPeersList(): Array<string>;
  setTrustedPeersList(value: Array<string>): void;
  addTrustedPeers(value: string, index?: number): string;

  getName(): string;
  setName(value: string): void;

  getLogoUrl(): string;
  setLogoUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateClientReq.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateClientReq): UpdateClientReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateClientReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateClientReq;
  static deserializeBinaryFromReader(message: UpdateClientReq, reader: jspb.BinaryReader): UpdateClientReq;
}

export namespace UpdateClientReq {
  export type AsObject = {
    id: string,
    redirectUrisList: Array<string>,
    trustedPeersList: Array<string>,
    name: string,
    logoUrl: string,
  }
}

export class UpdateClientResp extends jspb.Message {
  getNotFound(): boolean;
  setNotFound(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateClientResp.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateClientResp): UpdateClientResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateClientResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateClientResp;
  static deserializeBinaryFromReader(message: UpdateClientResp, reader: jspb.BinaryReader): UpdateClientResp;
}

export namespace UpdateClientResp {
  export type AsObject = {
    notFound: boolean,
  }
}

export class Password extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  getHash(): Uint8Array | string;
  getHash_asU8(): Uint8Array;
  getHash_asB64(): string;
  setHash(value: Uint8Array | string): void;

  getUsername(): string;
  setUsername(value: string): void;

  getUserId(): string;
  setUserId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Password.AsObject;
  static toObject(includeInstance: boolean, msg: Password): Password.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Password, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Password;
  static deserializeBinaryFromReader(message: Password, reader: jspb.BinaryReader): Password;
}

export namespace Password {
  export type AsObject = {
    email: string,
    hash: Uint8Array | string,
    username: string,
    userId: string,
  }
}

export class CreatePasswordReq extends jspb.Message {
  hasPassword(): boolean;
  clearPassword(): void;
  getPassword(): Password | undefined;
  setPassword(value?: Password): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePasswordReq.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePasswordReq): CreatePasswordReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreatePasswordReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePasswordReq;
  static deserializeBinaryFromReader(message: CreatePasswordReq, reader: jspb.BinaryReader): CreatePasswordReq;
}

export namespace CreatePasswordReq {
  export type AsObject = {
    password?: Password.AsObject,
  }
}

export class CreatePasswordResp extends jspb.Message {
  getAlreadyExists(): boolean;
  setAlreadyExists(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePasswordResp.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePasswordResp): CreatePasswordResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreatePasswordResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePasswordResp;
  static deserializeBinaryFromReader(message: CreatePasswordResp, reader: jspb.BinaryReader): CreatePasswordResp;
}

export namespace CreatePasswordResp {
  export type AsObject = {
    alreadyExists: boolean,
  }
}

export class UpdatePasswordReq extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  getNewHash(): Uint8Array | string;
  getNewHash_asU8(): Uint8Array;
  getNewHash_asB64(): string;
  setNewHash(value: Uint8Array | string): void;

  getNewUsername(): string;
  setNewUsername(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdatePasswordReq.AsObject;
  static toObject(includeInstance: boolean, msg: UpdatePasswordReq): UpdatePasswordReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdatePasswordReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdatePasswordReq;
  static deserializeBinaryFromReader(message: UpdatePasswordReq, reader: jspb.BinaryReader): UpdatePasswordReq;
}

export namespace UpdatePasswordReq {
  export type AsObject = {
    email: string,
    newHash: Uint8Array | string,
    newUsername: string,
  }
}

export class UpdatePasswordResp extends jspb.Message {
  getNotFound(): boolean;
  setNotFound(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdatePasswordResp.AsObject;
  static toObject(includeInstance: boolean, msg: UpdatePasswordResp): UpdatePasswordResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdatePasswordResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdatePasswordResp;
  static deserializeBinaryFromReader(message: UpdatePasswordResp, reader: jspb.BinaryReader): UpdatePasswordResp;
}

export namespace UpdatePasswordResp {
  export type AsObject = {
    notFound: boolean,
  }
}

export class DeletePasswordReq extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeletePasswordReq.AsObject;
  static toObject(includeInstance: boolean, msg: DeletePasswordReq): DeletePasswordReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeletePasswordReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeletePasswordReq;
  static deserializeBinaryFromReader(message: DeletePasswordReq, reader: jspb.BinaryReader): DeletePasswordReq;
}

export namespace DeletePasswordReq {
  export type AsObject = {
    email: string,
  }
}

export class DeletePasswordResp extends jspb.Message {
  getNotFound(): boolean;
  setNotFound(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeletePasswordResp.AsObject;
  static toObject(includeInstance: boolean, msg: DeletePasswordResp): DeletePasswordResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeletePasswordResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeletePasswordResp;
  static deserializeBinaryFromReader(message: DeletePasswordResp, reader: jspb.BinaryReader): DeletePasswordResp;
}

export namespace DeletePasswordResp {
  export type AsObject = {
    notFound: boolean,
  }
}

export class ListPasswordReq extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPasswordReq.AsObject;
  static toObject(includeInstance: boolean, msg: ListPasswordReq): ListPasswordReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListPasswordReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPasswordReq;
  static deserializeBinaryFromReader(message: ListPasswordReq, reader: jspb.BinaryReader): ListPasswordReq;
}

export namespace ListPasswordReq {
  export type AsObject = {
  }
}

export class ListPasswordResp extends jspb.Message {
  clearPasswordsList(): void;
  getPasswordsList(): Array<Password>;
  setPasswordsList(value: Array<Password>): void;
  addPasswords(value?: Password, index?: number): Password;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPasswordResp.AsObject;
  static toObject(includeInstance: boolean, msg: ListPasswordResp): ListPasswordResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListPasswordResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPasswordResp;
  static deserializeBinaryFromReader(message: ListPasswordResp, reader: jspb.BinaryReader): ListPasswordResp;
}

export namespace ListPasswordResp {
  export type AsObject = {
    passwordsList: Array<Password.AsObject>,
  }
}

export class VersionReq extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VersionReq.AsObject;
  static toObject(includeInstance: boolean, msg: VersionReq): VersionReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: VersionReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VersionReq;
  static deserializeBinaryFromReader(message: VersionReq, reader: jspb.BinaryReader): VersionReq;
}

export namespace VersionReq {
  export type AsObject = {
  }
}

export class VersionResp extends jspb.Message {
  getServer(): string;
  setServer(value: string): void;

  getApi(): number;
  setApi(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VersionResp.AsObject;
  static toObject(includeInstance: boolean, msg: VersionResp): VersionResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: VersionResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VersionResp;
  static deserializeBinaryFromReader(message: VersionResp, reader: jspb.BinaryReader): VersionResp;
}

export namespace VersionResp {
  export type AsObject = {
    server: string,
    api: number,
  }
}

export class RefreshTokenRef extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getClientId(): string;
  setClientId(value: string): void;

  getCreatedAt(): number;
  setCreatedAt(value: number): void;

  getLastUsed(): number;
  setLastUsed(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RefreshTokenRef.AsObject;
  static toObject(includeInstance: boolean, msg: RefreshTokenRef): RefreshTokenRef.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RefreshTokenRef, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RefreshTokenRef;
  static deserializeBinaryFromReader(message: RefreshTokenRef, reader: jspb.BinaryReader): RefreshTokenRef;
}

export namespace RefreshTokenRef {
  export type AsObject = {
    id: string,
    clientId: string,
    createdAt: number,
    lastUsed: number,
  }
}

export class ListRefreshReq extends jspb.Message {
  getUserId(): string;
  setUserId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListRefreshReq.AsObject;
  static toObject(includeInstance: boolean, msg: ListRefreshReq): ListRefreshReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListRefreshReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListRefreshReq;
  static deserializeBinaryFromReader(message: ListRefreshReq, reader: jspb.BinaryReader): ListRefreshReq;
}

export namespace ListRefreshReq {
  export type AsObject = {
    userId: string,
  }
}

export class ListRefreshResp extends jspb.Message {
  clearRefreshTokensList(): void;
  getRefreshTokensList(): Array<RefreshTokenRef>;
  setRefreshTokensList(value: Array<RefreshTokenRef>): void;
  addRefreshTokens(value?: RefreshTokenRef, index?: number): RefreshTokenRef;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListRefreshResp.AsObject;
  static toObject(includeInstance: boolean, msg: ListRefreshResp): ListRefreshResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListRefreshResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListRefreshResp;
  static deserializeBinaryFromReader(message: ListRefreshResp, reader: jspb.BinaryReader): ListRefreshResp;
}

export namespace ListRefreshResp {
  export type AsObject = {
    refreshTokensList: Array<RefreshTokenRef.AsObject>,
  }
}

export class RevokeRefreshReq extends jspb.Message {
  getUserId(): string;
  setUserId(value: string): void;

  getClientId(): string;
  setClientId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RevokeRefreshReq.AsObject;
  static toObject(includeInstance: boolean, msg: RevokeRefreshReq): RevokeRefreshReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RevokeRefreshReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RevokeRefreshReq;
  static deserializeBinaryFromReader(message: RevokeRefreshReq, reader: jspb.BinaryReader): RevokeRefreshReq;
}

export namespace RevokeRefreshReq {
  export type AsObject = {
    userId: string,
    clientId: string,
  }
}

export class RevokeRefreshResp extends jspb.Message {
  getNotFound(): boolean;
  setNotFound(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RevokeRefreshResp.AsObject;
  static toObject(includeInstance: boolean, msg: RevokeRefreshResp): RevokeRefreshResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RevokeRefreshResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RevokeRefreshResp;
  static deserializeBinaryFromReader(message: RevokeRefreshResp, reader: jspb.BinaryReader): RevokeRefreshResp;
}

export namespace RevokeRefreshResp {
  export type AsObject = {
    notFound: boolean,
  }
}

export class VerifyPasswordReq extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): void;

  getPassword(): string;
  setPassword(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyPasswordReq.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyPasswordReq): VerifyPasswordReq.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: VerifyPasswordReq, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyPasswordReq;
  static deserializeBinaryFromReader(message: VerifyPasswordReq, reader: jspb.BinaryReader): VerifyPasswordReq;
}

export namespace VerifyPasswordReq {
  export type AsObject = {
    email: string,
    password: string,
  }
}

export class VerifyPasswordResp extends jspb.Message {
  getVerified(): boolean;
  setVerified(value: boolean): void;

  getNotFound(): boolean;
  setNotFound(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyPasswordResp.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyPasswordResp): VerifyPasswordResp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: VerifyPasswordResp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyPasswordResp;
  static deserializeBinaryFromReader(message: VerifyPasswordResp, reader: jspb.BinaryReader): VerifyPasswordResp;
}

export namespace VerifyPasswordResp {
  export type AsObject = {
    verified: boolean,
    notFound: boolean,
  }
}

