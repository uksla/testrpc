/* eslint-disable */
/*Generated by GenDocu.com*/
// package: api
// file: api.proto

var api_pb = require("./api_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Dex = (function () {
  function Dex() {}
  Dex.serviceName = "api.Dex";
  return Dex;
}());

Dex.GetClient = {
  methodName: "GetClient",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.GetClientReq,
  responseType: api_pb.GetClientResp
};

Dex.CreateClient = {
  methodName: "CreateClient",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.CreateClientReq,
  responseType: api_pb.CreateClientResp
};

Dex.UpdateClient = {
  methodName: "UpdateClient",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.UpdateClientReq,
  responseType: api_pb.UpdateClientResp
};

Dex.DeleteClient = {
  methodName: "DeleteClient",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.DeleteClientReq,
  responseType: api_pb.DeleteClientResp
};

Dex.CreatePassword = {
  methodName: "CreatePassword",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.CreatePasswordReq,
  responseType: api_pb.CreatePasswordResp
};

Dex.UpdatePassword = {
  methodName: "UpdatePassword",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.UpdatePasswordReq,
  responseType: api_pb.UpdatePasswordResp
};

Dex.DeletePassword = {
  methodName: "DeletePassword",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.DeletePasswordReq,
  responseType: api_pb.DeletePasswordResp
};

Dex.ListPasswords = {
  methodName: "ListPasswords",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.ListPasswordReq,
  responseType: api_pb.ListPasswordResp
};

Dex.GetVersion = {
  methodName: "GetVersion",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.VersionReq,
  responseType: api_pb.VersionResp
};

Dex.ListRefresh = {
  methodName: "ListRefresh",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.ListRefreshReq,
  responseType: api_pb.ListRefreshResp
};

Dex.RevokeRefresh = {
  methodName: "RevokeRefresh",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.RevokeRefreshReq,
  responseType: api_pb.RevokeRefreshResp
};

Dex.VerifyPassword = {
  methodName: "VerifyPassword",
  service: Dex,
  requestStream: false,
  responseStream: false,
  requestType: api_pb.VerifyPasswordReq,
  responseType: api_pb.VerifyPasswordResp
};

exports.Dex = Dex;

function DexClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

DexClient.prototype.getClient = function getClient(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.GetClient, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.createClient = function createClient(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.CreateClient, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.updateClient = function updateClient(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.UpdateClient, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.deleteClient = function deleteClient(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.DeleteClient, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.createPassword = function createPassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.CreatePassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.updatePassword = function updatePassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.UpdatePassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.deletePassword = function deletePassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.DeletePassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.listPasswords = function listPasswords(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.ListPasswords, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.getVersion = function getVersion(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.GetVersion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.listRefresh = function listRefresh(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.ListRefresh, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.revokeRefresh = function revokeRefresh(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.RevokeRefresh, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

DexClient.prototype.verifyPassword = function verifyPassword(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Dex.VerifyPassword, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.DexClient = DexClient;

